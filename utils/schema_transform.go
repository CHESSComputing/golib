package utils

import (
	"bytes"
	"fmt"
	"strings"
	"unicode"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

// ConvertCacmeCaseKeys converts map with CamelCase keys to map with snake case keys
func ConvertCamelCaseKeys(rec map[string]any) map[string]any {
	nrec := make(map[string]any)
	for key, val := range rec {
		nkey := CamelCaseToSnakeCase(key)
		nrec[nkey] = val
	}
	return nrec
}

// CamelCaseToSnakeCase converts CamelCase string object to `camel_case`, code generated by ChatGPT, but
// further adjusted to accommodate special cases, like CESRConditions => cesr_conditions
func CamelCaseToSnakeCase(s string) string {
	var buffer bytes.Buffer
	lastWasLower := false
	for i, char := range s {
		if unicode.IsUpper(char) {
			if i > 0 && lastWasLower {
				buffer.WriteByte('_')
			}
			buffer.WriteRune(unicode.ToLower(char))
			lastWasLower = false
			// block which handles special cases with series of upper letters followed by
			// CamelCase, e.g. CESRConditions should be converted to cesr_conditions
			if i+2 < len(s) {
				nextChar := rune(s[i+1])
				nextNextChar := rune(s[i+2])
				if unicode.IsUpper(nextChar) && unicode.IsLower(nextNextChar) {
					lastWasLower = true
				}
			}
		} else if unicode.IsLower(char) {
			buffer.WriteRune(char)
			lastWasLower = true
		} else {
			lastWasLower = false
		}
	}
	return buffer.String()
}

// helper function to get key value from a map
func getValue(key string, rec map[string]any) string {
	var s string
	switch val := rec[key].(type) {
	case nil:
		s = ""
	case []string:
		var out []string
		for _, v := range val {
			out = append(out, fmt.Sprintf("%s", v))
		}
		s = strings.Join(out, ",")
	case primitive.A:
		var out []string
		for _, v := range val {
			out = append(out, fmt.Sprintf("%v", v))
		}
		s = strings.Join(out, ",")
	default:
		s = fmt.Sprintf("%v", val)
	}
	return s
}

// GetDid constructs did from given record
func GetDid(rec map[string]any) string {
	did := fmt.Sprintf("/beamline=%v/btr=%v/cycle=%v/sample=%v",
		getValue("Beamline", rec),
		getValue("BTR", rec),
		getValue("Cycle", rec),
		getValue("SampleName", rec),
	)
	return did
}
